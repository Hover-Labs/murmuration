parameter (or (or (unit %default) (or (pair %rescueFA12 (address %tokenContractAddress) (pair (nat %amount) (address %destination))) (pair %rescueFA2 (address %tokenContractAddress) (pair (nat %tokenId) (pair (nat %amount) (address %destination)))))) (or (or (address %rescueXTZ) (pair %send (nat %numberOfTokens) (address %destination))) (or (option %setDelegate key_hash) (address %setGovernorContract))));
storage   (pair (address %governorAddress) (pair (big_map %metadata string bytes) (address %tokenContractAddress)));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            DROP;       # @storage
            # == default == # @storage
            NIL operation; # list operation : @storage
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%rescueFA12
                # == rescueFA12 ==
                # sp.verify(sp.sender == self.data.governorAddress, 'NOT_GOVERNOR') # @storage : @parameter%rescueFA12
                DUP;        # @storage : @storage : @parameter%rescueFA12
                DUG 2;      # @storage : @parameter%rescueFA12 : @storage
                CAR;        # address : @parameter%rescueFA12 : @storage
                SENDER;     # @sender : address : @parameter%rescueFA12 : @storage
                COMPARE;    # int : @parameter%rescueFA12 : @storage
                EQ;         # bool : @parameter%rescueFA12 : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_GOVERNOR"; # string : @parameter%rescueFA12 : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%rescueFA12 : @storage
                # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.destination, value = params.amount), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), params.tokenContractAddress, entry_point='transfer').open_some()) # @parameter%rescueFA12 : @storage
                DUP;        # @parameter%rescueFA12 : @parameter%rescueFA12 : @storage
                CAR;        # address : @parameter%rescueFA12 : @storage
                CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @parameter%rescueFA12 : @storage
                IF_NONE
                  {
                    PUSH int 93; # int : @parameter%rescueFA12 : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%rescueFA12 : @storage
                NIL operation; # list operation : @some : @parameter%rescueFA12 : @storage
                SWAP;       # @some : list operation : @parameter%rescueFA12 : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%rescueFA12 : @storage
                DIG 3;      # @parameter%rescueFA12 : mutez : @some : list operation : @storage
                DUP;        # @parameter%rescueFA12 : @parameter%rescueFA12 : mutez : @some : list operation : @storage
                GET 3;      # nat : @parameter%rescueFA12 : mutez : @some : list operation : @storage
                SWAP;       # @parameter%rescueFA12 : nat : mutez : @some : list operation : @storage
                GET 4;      # address : nat : mutez : @some : list operation : @storage
                SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @storage
                PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%rescueFA2
                # == rescueFA2 ==
                # sp.verify(sp.sender == self.data.governorAddress, 'NOT_GOVERNOR') # @storage : @parameter%rescueFA2
                DUP;        # @storage : @storage : @parameter%rescueFA2
                DUG 2;      # @storage : @parameter%rescueFA2 : @storage
                CAR;        # address : @parameter%rescueFA2 : @storage
                SENDER;     # @sender : address : @parameter%rescueFA2 : @storage
                COMPARE;    # int : @parameter%rescueFA2 : @storage
                EQ;         # bool : @parameter%rescueFA2 : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_GOVERNOR"; # string : @parameter%rescueFA2 : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%rescueFA2 : @storage
                # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.destination, token_id = params.tokenId, amount = params.amount)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), params.tokenContractAddress, entry_point='transfer').open_some()) # @parameter%rescueFA2 : @storage
                DUP;        # @parameter%rescueFA2 : @parameter%rescueFA2 : @storage
                CAR;        # address : @parameter%rescueFA2 : @storage
                CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : @parameter%rescueFA2 : @storage
                IF_NONE
                  {
                    PUSH int 119; # int : @parameter%rescueFA2 : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%rescueFA2 : @storage
                NIL operation; # list operation : @some : @parameter%rescueFA2 : @storage
                SWAP;       # @some : list operation : @parameter%rescueFA2 : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%rescueFA2 : @storage
                NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%rescueFA2 : @storage
                NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%rescueFA2 : @storage
                DIG 5;      # @parameter%rescueFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                DUP;        # @parameter%rescueFA2 : @parameter%rescueFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                GET 5;      # nat : @parameter%rescueFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                SWAP;       # @parameter%rescueFA2 : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                DUP;        # @parameter%rescueFA2 : @parameter%rescueFA2 : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                GET 3;      # nat : @parameter%rescueFA2 : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                SWAP;       # @parameter%rescueFA2 : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                GET 6;      # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }; # list operation : @storage
          }; # list operation : @storage
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%rescueXTZ
                # == rescueXTZ ==
                # sp.verify(sp.sender == self.data.governorAddress, 'NOT_GOVERNOR') # @storage : @parameter%rescueXTZ
                DUP;        # @storage : @storage : @parameter%rescueXTZ
                DUG 2;      # @storage : @parameter%rescueXTZ : @storage
                CAR;        # address : @parameter%rescueXTZ : @storage
                SENDER;     # @sender : address : @parameter%rescueXTZ : @storage
                COMPARE;    # int : @parameter%rescueXTZ : @storage
                EQ;         # bool : @parameter%rescueXTZ : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_GOVERNOR"; # string : @parameter%rescueXTZ : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%rescueXTZ : @storage
                # sp.send(params.destinationAddress, sp.balance) # @parameter%rescueXTZ : @storage
                CONTRACT unit; # option (contract unit) : @storage
                IF_NONE
                  {
                    PUSH int 78; # int : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @storage
                NIL operation; # list operation : @some : @storage
                SWAP;       # @some : list operation : @storage
                BALANCE;    # @balance : @some : list operation : @storage
                UNIT;       # unit : @balance : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%send
                # == send ==
                # sp.verify(sp.sender == self.data.governorAddress, 'NOT_GOVERNOR') # @storage : @parameter%send
                DUP;        # @storage : @storage : @parameter%send
                DUG 2;      # @storage : @parameter%send : @storage
                CAR;        # address : @parameter%send : @storage
                SENDER;     # @sender : address : @parameter%send : @storage
                COMPARE;    # int : @parameter%send : @storage
                EQ;         # bool : @parameter%send : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_GOVERNOR"; # string : @parameter%send : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%send : @storage
                # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.destination, value = params.numberOfTokens), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenContractAddress, entry_point='transfer').open_some()) # @parameter%send : @storage
                NIL operation; # list operation : @parameter%send : @storage
                DUP 3;      # @storage : list operation : @parameter%send : @storage
                GET 4;      # address : list operation : @parameter%send : @storage
                CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%send : @storage
                IF_NONE
                  {
                    PUSH int 63; # int : list operation : @parameter%send : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%send : @storage
                PUSH mutez 0; # mutez : @some : list operation : @parameter%send : @storage
                DIG 3;      # @parameter%send : mutez : @some : list operation : @storage
                UNPAIR;     # nat : address : mutez : @some : list operation : @storage
                SWAP;       # address : nat : mutez : @some : list operation : @storage
                SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @storage
                PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @storage
                TRANSFER_TOKENS; # operation : list operation : @storage
                CONS;       # list operation : @storage
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%setDelegate
                # == setDelegate ==
                # sp.verify(sp.sender == self.data.governorAddress, 'NOT_GOVERNOR') # @storage : @parameter%setDelegate
                DUP;        # @storage : @storage : @parameter%setDelegate
                DUG 2;      # @storage : @parameter%setDelegate : @storage
                CAR;        # address : @parameter%setDelegate : @storage
                SENDER;     # @sender : address : @parameter%setDelegate : @storage
                COMPARE;    # int : @parameter%setDelegate : @storage
                EQ;         # bool : @parameter%setDelegate : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_GOVERNOR"; # string : @parameter%setDelegate : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%setDelegate : @storage
                # sp.set_delegate(params) # @parameter%setDelegate : @storage
                SET_DELEGATE; # operation : @storage
                NIL operation; # list operation : operation : @storage
                SWAP;       # operation : list operation : @storage
                CONS;       # list operation : @storage
              }
              {
                SWAP;       # @storage : @parameter%setGovernorContract
                # == setGovernorContract ==
                # sp.verify(sp.sender == self.data.governorAddress, 'NOT_GOVERNOR') # @storage : @parameter%setGovernorContract
                DUP;        # @storage : @storage : @parameter%setGovernorContract
                DUG 2;      # @storage : @parameter%setGovernorContract : @storage
                CAR;        # address : @parameter%setGovernorContract : @storage
                SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                COMPARE;    # int : @parameter%setGovernorContract : @storage
                EQ;         # bool : @parameter%setGovernorContract : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_GOVERNOR"; # string : @parameter%setGovernorContract : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%setGovernorContract : @storage
                # self.data.governorAddress = params # @parameter%setGovernorContract : @storage
                UPDATE 1;   # @storage
                NIL operation; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };